#include <stdio.h>
#include<stdlib.h>
struct node{
  int vertex;
  struct node*next;
};

struct Graph{
  int vertices;
  struct node**adjLists;
  int *visited;
  int *distance;
};

struct node* createNode(int vertex){
  struct node*new_node=malloc(sizeof(struct node));
  new_node->vertex=vertex;
  new_node->next=NULL;
  return new_node;
}

struct Graph* createGraph(int vertices){
  struct Graph*graph=malloc(sizeof(struct Graph));
  graph->vertices=vertices;
  graph->visited=malloc(vertices*sizeof(int));
  graph->distance=malloc(vertices*sizeof(int));
  graph->adjLists=malloc(vertices*sizeof(struct node*));
  for(int i=0;i<vertices;i++){
    graph->adjLists[i]=NULL;
    //graph->visited=NULL;
    graph->distance[i]=-1;
    graph->visited[i]=0;
  }
  return graph;
}

struct Queue{
  int *array;
  int front;
  int rear;
  int size;
};

struct Queue* createQueue(int v){
  struct Queue*q=malloc(sizeof(struct Queue));
  q->front=-1;
  q->rear=-1;
  q->array=malloc(v*sizeof(int));
  q->size=v;
  return q;
}

void enqueue(int vertex,struct Queue*q){
  if((q->front==0&&q->rear==q->size-1)||q->rear==q->front-1){
    printf("ohhhh while enquing it has got full\n");
  }
  else{
    if(q->front==-1){
    q->front=0;
    }
    q->rear=(q->rear+1)%q->size;
    q->array[q->rear]=vertex;
  }
}

int dequeue(struct Queue*q){
  if(q->front==-1){
    printf("its already empty\nhow can i dequeue then\n");
    return -1;
  }
  else{
    int item=q->array[q->front];
    if(q->front==q->rear){
      q->front=-1;
      q->rear=-1;
    }
    else{
      q->front=(q->front+1)%q->size;
    }
    return item;
  }
}

void printQueue(struct Queue*q){
  int i;
  for( i=q->front;i!=q->rear;i=(i+1)%((q->size)-1)){
    printf("%d ",q->array[i]);
  }
  if(q->front!=-1)
  printf("%d\n",q->array[i]);
}


void addEdge(struct Graph*graph,int src,int dest){
  struct node*newNode=createNode(dest);
  newNode->next=graph->adjLists[src];
  graph->adjLists[src]=newNode;
}

int bfs(struct Graph*g,int startVertex,int key){
  //int distance=0;
  for(int i=0;i<g->vertices;i++){
    g->visited[i]=0;
    g->distance[i]=0;
  }
  g->distance[startVertex]=0;
  struct Queue*q=createQueue(g->vertices);
  enqueue(startVertex, q);


  while(q->front!=-1){
    int currentVertex=dequeue(q);
    struct node*temp=g->adjLists[currentVertex];
    while(temp!=NULL){
      int adjVertex=temp->vertex;
      if(g->visited[adjVertex]==0){
        enqueue(adjVertex,q);
        g->visited[adjVertex]=1;
        g->distance[adjVertex]=g->distance[currentVertex]+1;
        if(adjVertex==key){
          return g->distance[adjVertex];
        }
      }
      temp=temp->next;
    }
  }
  return -1;
}
int main(void) {
  printf("Hello World\n");
  struct Graph*g=createGraph(6);
  //addEdge(g, 0, 1);
  addEdge(g, 0, 1);
  addEdge(g, 0, 2);
  addEdge(g, 0, 5);
  addEdge(g, 1, 3);
  addEdge(g, 1, 5);
  addEdge(g, 1, 0);
  addEdge(g, 5, 4);
  addEdge(g, 1, 2);
  addEdge(g, 2, 3);
  addEdge(g, 3, 4);
  //addEdge(g, 2, 3);
  for(int i=0;i<6;i++)
  for(int j=0;j<6;j++)
  printf("dist(%d,%d)=%d\n",i,j,bfs(g,i,j));
  return 0;
}
